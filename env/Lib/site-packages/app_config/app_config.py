import boto3
from botocore.exceptions import ClientError
import json
from collections import defaultdict

class AppConfig(object):
    _ENVIRONMENT_DEFAULT_NAME = 'default'
    _DYNAMO_DB_TABLE = 'app_config'

    def __init__(self, region, environment_name, table_name=_DYNAMO_DB_TABLE):
        self._resources = defaultdict(dict)
        self._environment = environment_name
        self._dynamodb = boto3.resource('dynamodb', region_name=region)
        self._table = self._dynamodb.Table(table_name)

    def __getitem__(self, resource_name):
        if not self._resources[resource_name]:
            self._load_resources_from_dynamo_db(resource_name, self._ENVIRONMENT_DEFAULT_NAME)
            self._load_resources_from_dynamo_db(resource_name, self._environment)
        return self._resources[resource_name]

    def _load_resources_from_dynamo_db(self, resource_name, environment):
        try:
            response = self._table.get_item(Key={'resource_name': resource_name, 'environment': environment})
            item = response.get('Item')
            if item:
                config_data = item.get('config')
                resource_dict = json.loads(config_data)
                self._resources[resource_name].update(resource_dict)
        except ClientError as e:
            print(f"Failed to retrieve item: {e}")
        except Exception as e:
            print(f"An error occurred: {e}")
